/*

Developing These procedure are best practices to design the more readable and efficient Store procedure to maintain the logs and debug the procedure

*/

create or replace TABLE DB_NAME.SCHEMA_NAME.ETL_JOB_LOG (
	RUN_ID NUMBER(38,0),
	PROC_NAME VARCHAR(16777216),
	PROCEDURE_TYPE VARCHAR(16777216),
	TARGET_TABLE VARCHAR(16777216),
	START_TIME TIMESTAMP_NTZ(9),
	END_TIME TIMESTAMP_NTZ(9),
	RUN_STATUS VARCHAR(16777216),
	ERROR_MSSG VARCHAR(16777216),
	RUN_LOGS VARCHAR(16777216),
	EXECUTED_BY VARCHAR(16777216),
	WAREHOUSE_USED VARCHAR(16777216),
	ROLE_USED VARCHAR(16777216)
);

CREATE OR REPLACE PROCEDURE DB_NAME.SCHEMA_NAME.SP_ETL_JOB_START("PROC_NAME" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216), "TARGETTABLENAME" VARCHAR(16777216), "TABLETYPE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS
DECLARE
	UserName VARCHAR;
	SFWareHouse VARCHAR;
	SFRole VARCHAR;
BEGIN
	select current_warehouse() INTO :SFWareHouse;
	select current_role() INTO :SFRole;
	select current_user() INTO :UserName;
	
	IF (RUN_ID = 'NONE') 
	THEN
		SELECT  DB_NAME.SCHEMA_NAME.SEQ_PROC_RUN_ID.NEXTVAL AS RUN_ID INTO :RUN_ID;	
	END IF;
	
	INSERT INTO DB_NAME.SCHEMA_NAME.ETL_JOB_LOG(RUN_ID ,PROC_NAME ,PROCEDURE_TYPE ,TARGET_TABLE ,START_TIME ,END_TIME ,RUN_STATUS , ERROR_MSSG, RUN_LOGS, EXECUTED_BY, WAREHOUSE_USED , ROLE_USED ) VALUES (:RUN_ID,:PROC_NAME,:TableType,:TargetTableName,TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP()),NULL,'RUNNING', NULL, '', :UserName,:SFWareHouse,:SFRole);
	
	return RUN_ID;
END;


CREATE OR REPLACE PROCEDURE DB_NAME.SCHEMA_NAME.ETL_LOG_DEBUG("RUN_ID" VARCHAR(16777216), "PROC_NAME" VARCHAR(16777216), "TARGET_TABLE" VARCHAR(16777216), "STEP_LOG" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS
BEGIN
UPDATE DB_NAME.SCHEMA_NAME.ETL_JOB_LOG SET 
    RUN_LOGS = RUN_LOGS || TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP) || ' - ' || :STEP_LOG || '\\n'
    WHERE RUN_ID = :RUN_ID 
    AND PROC_NAME = :PROC_NAME
    AND TARGET_TABLE = :TARGET_TABLE;	
RETURN 'SUCCESS';
END;


CREATE OR REPLACE PROCEDURE DB_NAME.SCHEMA_NAME.SP_ETL_JOB_END("RUN_ID" VARCHAR(16777216), "PROC_NAME" VARCHAR(16777216), "RUN_STATUS" VARCHAR(16777216), "ERROR_MSSG" VARCHAR(16777216), "TARGET_TABLE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS 
BEGIN

	UPDATE DB_NAME.SCHEMA_NAME.ETL_JOB_LOG SET 
    END_TIME = TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP()),
    RUN_STATUS= :RUN_STATUS,
    ERROR_MSSG= :ERROR_MSSG
    WHERE RUN_ID = :RUN_ID 
    AND PROC_NAME = :PROC_NAME
    AND TARGET_TABLE = :TARGET_TABLE;				
	
	RETURN 'SUCCESS';
END;


CREATE OR REPLACE PROCEDURE DB_NAME.SCHEMA_NAME.PROC_NAME()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS CALLER
AS DECLARE 
    vProcedureName VARCHAR DEFAULT '';
    vTargetTableName VARCHAR DEFAULT '';
    vTableType VARCHAR DEFAULT '';
    ETLJobRunId VARCHAR DEFAULT 'NONE';
    RunStatus VARCHAR DEFAULT 'SUCCESS';
    vETLStep VARCHAR;
    vErrMssg VARCHAR DEFAULT '';
	v_email_recepients VARCHAR ;
	CUSTOM_TASK_FAILURE EXCEPTION (-20002, 'Raised CUSTOM_TASK_FAILURE.');
BEGIN 

CALL DB_NAME.SCHEMA_NAME.SP_ETL_JOB_START(:vProcedureName, :ETLJobRunId, :vTargetTableName, :vTableType ) INTO :ETLJobRunId;

SET vETLStep := 'Creting backup table...';
CALL DB_NAME.SCHEMA_NAME.ETL_LOG_DEBUG(:ETLJobRunId, :vProcedureName, :vTargetTableName, :vETLStep );


INSERT OVERWRITE INTO DB_NAME.SCHEMA_NAME.TARGET_TABLE SELECT * FROM DB_NAME.SCHEMA_NAME.BASE_TABLE;

SET vETLStep := 'Inserted/Overwritten '|| :SQLROWCOUNT ||' records into actual table...';
CALL DB_NAME.SCHEMA_NAME.ETL_LOG_DEBUG(:ETLJobRunId, :vProcedureName, :vTargetTableName, :vETLStep );


SET vETLStep := 'Dropped all the backup/temp/transient tables...';
CALL DB_NAME.SCHEMA_NAME.ETL_LOG_DEBUG(:ETLJobRunId, :vProcedureName, :vTargetTableName, :vETLStep );
CALL DB_NAME.SCHEMA_NAME.SP_ETL_JOB_END(:ETLJobRunId, :vProcedureName, :RunStatus, :vErrMssg , :vTargetTableName );
---------------------------------------------------------------------------------------------------------------------

RETURN RunStatus;  
 
EXCEPTION 
    WHEN OTHER THEN
    BEGIN
    	RunStatus := 'FAILED';
    	vErrMssg := 'SQLCODE : ' || :sqlcode || ' SQLERRM : ' || sqlerrm || ' SQLSTATE : ' || sqlstate ;
    	CALL DB_NAME.SCHEMA_NAME.SP_ETL_JOB_END(:ETLJobRunId, :vProcedureName, :RunStatus, :vErrMssg , :vTargetTableName );
    	CALL SYSTEM$SEND_EMAIL('SF_EMAIL_INTEGRATION',:v_email_recepients,'Failure Alert for ' || :vProcedureName,'Task failed with Error: ' ||:vErrMssg);	
    	RAISE CUSTOM_TASK_FAILURE;	
    END;

END;